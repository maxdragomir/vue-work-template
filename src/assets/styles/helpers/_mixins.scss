// Mixin
// =====================================================================================================================

// fonts
//@mixin addFont($name) {
//  @font-face {
//    font-family: $name;
//    src: url(../fonts/#{$name}.eot);
//    src: url(../fonts/#{$name}.eot?#iefix) format("embedded-opentype"),
//    url(../fonts/#{$name}.otf) format("otf"),
//    url(../fonts/#{$name}.woff) format("woff"),
//    url(../fonts/#{$name}.ttf) format("truetype"),
//    url(../fonts/#{$name}.svg##{$name}) format("svg")
//  }
//}


// size to one line
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}



// media
$max               : $media_max;
$l                 : $media_l;
$m                 : $media_m;
$s                 : $media_s;
$xs                : $media_xs;

@mixin MQ($breakpoints, $min_max: max, $width_height: width) {
  @if $breakpoints == max {
    @media only screen and (#{$min_max}-#{$width_height}: #{$max}px) {
      @content;
    }
  } @else if $breakpoints == l {
    @media only screen and (#{$min_max}-#{$width_height}: #{$l}px) {
      @content;
    }
  } @else if $breakpoints == m {
    @media only screen and (#{$min_max}-#{$width_height}: #{$m}px) {
      @content;
    }
  } @else if $breakpoints == s {
    @media only screen and (#{$min_max}-#{$width_height}: #{$s}px) {
      @content;
    }
  } @else if $breakpoints == xs {
    @media only screen and (#{$min_max}-#{$width_height}: #{$xs}px) {
      @content;
    }
  } @else {
    @media only screen and (#{$min_max}-#{$width_height}: #{$breakpoints}px) {
      @content;
    }
  }
}
@mixin mediaMixin($minMax, $width) {
  @media only screen and (#{$minMax}-width: #{$width}px) {
    @content
  }
}
@mixin mediaDevices($name) {
  $device: map-get($devices, $name);
  @media #{$device} {
    @content
  }
}


// hover
@mixin on-hover {
  @media (hover: hover), all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    &:hover {
      @content;
    }
  }
}


//devices
@mixin ie() {
  @media all and (-ms-high-contrast: none) {
    @content
  }
}
@mixin moz() {
  @-moz-document url-prefix() {
    @content
  }
}
@mixin edge() {
  @supports (-ms-ime-align:auto) {
    @content
  }
}
@mixin safari() {
  @media not all and (min-resolution:.001dpcm)
  { @supports (-webkit-appearance:none) {
    @content
  }}
}


// gradientText
@mixin gradientText($arguments, $color, $ieColor: $color) {
  background: linear-gradient(#{$arguments});
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  @include ieFix(#{$ieColor})
}
// borderText
@mixin borderText($arguments, $color, $ieColor: $color) {
  -webkit-text-stroke: #{$arguments} #{$color};
  @include ieFix(#{$ieColor})
}
// ieFix text
@mixin ieFix($color) {
  @media all and (-ms-high-contrast: none) {
    background: transparent !important;
    color: #{$color} !important;
  }
}


// to rem
@function rem($pixels, $context: $fz_base) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px
  }
  @if (unitless($context)) {
    $context: $context * 1px
  }
  @return $pixels / $context * 1rem
}


// to em
@mixin em($properties, $context) {
  @each $property in map-keys($properties) {
    #{$property}: em(append(map-get($properties, $property), $context)...);
  }
}
@function em-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}
@function em($values...) {
  $context: strip-units(nth($values, length($values)));
  $result: ();
  $separator: list_separator($values);

  @for $i from 1 through length($values) - 1 {
    $value: nth($values, $i);
    @if type-of($value) == 'number' {
      $value: strip-units($value);
      $result: append($result, $value / $context * 1em, $separator);
    } @else if type-of($value) == 'list' {
      $result: append($result, em(append($value, $context)...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function adaptive1500($number) {
  @return ($number * 1.30148)
}
@function adaptive1300($number) {
  @return ($number * 1.7362)
}
@function adaptive1000($number) {
  @return ($number * 2.5)
}
@function adaptive560($number) {
  @return ($number * 5)
}

@function adaptive($number) {
  @return calc(#{$number} * var(--media))
}

@function opposite-number($directions) {
  @if ($is_rtl == 0) {
    @return $directions;
  } @else if ($is_rtl == 1) {
    @return -$directions;
  }
}
